import numpy as np

# Define material properties
E = 206e9  # Young's modulus in Pa
nu = 0.3  # Poisson's ratio
rho = 7850.0
m_dim = 2
m_nodxelem = 4

# Define element properties
red_int = False
element_length = 1.0   # Length of the element
dt = 0.1e-5
tf = 1.0e-3

# Define nodal velocities (dummy data for demonstration)
vel = np.full(m_dim * m_nodxelem, 0.1)
vel[5] = vel[7] = -1.0

# Initial positions and velocities
x = np.array([[0., 0.], [0.1, 0.], [0.1, 0.1], [0., 0.1]])
v = np.array([[0, 0], [0, 0], [0, -1], [0, -1]])  # Example velocities at nodes

# Gauss quadrature points and weights
if red_int:
    gauss_points = np.array([[0.0, 0.0]])
    gauss_weights = np.array([4.0])
    m_gp_count = 1
else:
    gauss_points = np.array([[-0.577350269, -0.577350269],
                             [0.577350269, -0.577350269],
                             [0.577350269, 0.577350269],
                             [-0.577350269, 0.577350269]])

    gauss_weights = np.array([1, 1, 1, 1])
    m_gp_count = 4

detJ = np.zeros((m_gp_count))
dNdX = np.zeros((m_gp_count, m_dim, m_nodxelem))
dNdrs = np.zeros((m_gp_count, m_dim, m_nodxelem))

# Function to impose boundary conditions
def impose_bc(vel, accel):
    vel[2, 1] = vel[3, 1] = -1.0
    vel[0, :] = vel[1, 1] = 0.0

    accel[2, 1] = accel[3, 1] = 0.0
    accel[0, :] = accel[1, 1] = 0.0

# Function to compute shape functions and their derivatives for 2D quadrilateral element
def shape_functions(xi, eta):
    dNdX_ = np.zeros((m_dim, m_nodxelem))
    N = np.array([(1-xi)*(1-eta)/4,
                  (1+xi)*(1-eta)/4,
                  (1+xi)*(1+eta)/4,
                  (1-xi)*(1+eta)/4])
    dNdX_[0, :] = np.array([-(1-eta)/4, (1-eta)/4, (1+eta)/4, -(1+eta)/4])
    dNdX_[1, :] = np.array([-(1-xi)/4, -(1+xi)/4, (1+xi)/4, (1-xi)/4])
    return N, dNdX_

# Function to calculate the Jacobian and its determinant
def calc_jacobian(pos):
    J = np.zeros((gp_count, 2, 2))
    detJ = np.zeros((gp_count))
    for gp in range(len(gauss_points)):
        xi, eta = gauss_points[gp]
        N, dNdrs[gp] = shape_functions(xi, eta)
        J[gp] = np.dot(dNdrs[gp], pos)
        detJ[gp] = np.linalg.det(J[gp])
        invJ = np.linalg.inv(J[gp])
        dNdX[gp] = np.dot(invJ, dNdrs[gp])
    return J, detJ, dNdX

# Function to calculate the strain rate tensor
def calc_str_rate(dNdX, vel):
    str_rate = np.zeros((m_gp_count, m_dim, m_dim))
    for gp in range(m_gp_count):
        grad_v = np.zeros((m_dim, m_dim))
        for I in range(m_dim):
            for J in range(m_dim):
                for k in range(m_nodxelem):
                    grad_v[I, J] += dNdX[gp, J, k] * vel[k, I]
        str_rate[gp] = 0.5 * (grad_v + grad_v.T)
    return str_rate

# Function to calculate the strain tensor
def calc_strain(str_rate, dt):
    strain = dt * str_rate
    return strain

# Function to calculate the stress tensor
def calc_stress(eps, dNdX):
    stress = np.zeros((m_gp_count, m_dim, m_dim))
    c = E / ((1.0 + nu) * (1.0 - 2.0 * nu))  # Plain strain
    for gp in range(len(gauss_points)):
        stress[gp, 0, 0] = c * ((1.0 - nu) * eps[gp, 0, 0] + nu * eps[gp, 1, 1])
        stress[gp, 1, 1] = c * ((1.0 - nu) * eps[gp, 1, 1] + nu * eps[gp, 0, 0])
        stress[gp, 0, 1] = stress[gp, 1, 0] = c * (1.0 - 2 * nu) * eps[gp, 0, 1] 
    return stress

# Function to calculate forces
def calc_forces(stress, dNdX, J):
    forces = np.zeros((m_nodxelem, m_dim))
    B = np.zeros((m_dim, m_nodxelem))
    for gp in range(len(gauss_points)):
        for i in range(m_nodxelem):
            B[0, i] = dNdX[gp, 0, i]
            B[1, i] = dNdX[gp, 1, i]    
        forces += np.dot(B.T, stress[gp]) * np.linalg.det(J[gp]) * gauss_weights[gp]
    return forces

# Main loop for leapfrog integration
t = 0.0
prev_a = np.zeros((m_nodxelem, m_dim))

while t < tf:
    print("Time:", t)

    # Prediction phase
    u = dt * (v + 0.5 * dt * prev_a)
    v = v + dt * prev_a
    a = np.zeros((m_nodxelem, m_dim))
    impose_bc(v, a)

    J, detJ, dNdX = calc_jacobian(x)
    str_rate = calc_str_rate(dNdX, v)
    strain = strain + calc_strain(str_rate, dt)
    stress = calc_stress(strain, dNdX)
    forces = calc_forces(stress, dNdX, J)
    a = -forces / nod_mass

    v = v + dt * a
    impose_bc(v, a)  # Reinforce velocity BC

    u = u + dt * a
    x = x + u

    prev_a = a
    t += dt

print("DISPLACEMENTS:", u_tot)